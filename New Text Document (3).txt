// schema.prisma
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  profilePic  String   @default("https://example.com/default-avatar.png")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  imageUrl    String?  // حقل اختياري لتخزين رابط الصورة
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
}


model Expert {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  profileFilePath String // مسار ملف PDF الخاص بالخبير
  role        Role     @default(EXPERT)
  status      ExpertStatus @default(PENDING) // حالة الخبير
  approvedAt  DateTime? // وقت الموافقة من قبل المشرف
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ExpertStatus {
  PENDING   // قيد المراجعة
  APPROVED  // تمت الموافقة
  REJECTED  // مرفوض
}


enum Role {
  USER
  ADMIN
  EXPERT
}






import { Request, Response, NextFunction } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

const isApprovedExpert = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const userId = req.user?.id;

        if (!userId) {
            return res.status(401).json({ message: "Unauthorized: No user ID provided" });
        }
        const expert = await prisma.expert.findUnique({
            where: { id: userId },
        });

        if (!expert || expert.role !== "EXPERT" || expert.status !== "APPROVED") {
            return res.status(403).json({ message: "Access denied: You are not an approved expert" });
        }
        next();
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
};

export default isApprovedExpert;







import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function approveExpert(expertId: number) {
    await prisma.expert.update({
        where: { id: expertId },
        data: {
            status: 'APPROVED',
            approvedAt: new Date(),
        },
    });

    console.log(`Expert ${expertId} approved successfully.`);
}
